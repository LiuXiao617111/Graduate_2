#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.33440
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcGraduate.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GraduationProject")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertFaculty(Faculty instance);
    partial void UpdateFaculty(Faculty instance);
    partial void DeleteFaculty(Faculty instance);
    partial void InsertGrade(Grade instance);
    partial void UpdateGrade(Grade instance);
    partial void DeleteGrade(Grade instance);
    partial void InsertGrades_Teachers(Grades_Teachers instance);
    partial void UpdateGrades_Teachers(Grades_Teachers instance);
    partial void DeleteGrades_Teachers(Grades_Teachers instance);
    partial void InsertHomeWork(HomeWork instance);
    partial void UpdateHomeWork(HomeWork instance);
    partial void DeleteHomeWork(HomeWork instance);
    partial void InsertNotify(Notify instance);
    partial void UpdateNotify(Notify instance);
    partial void DeleteNotify(Notify instance);
    partial void InsertNotify_People(Notify_People instance);
    partial void UpdateNotify_People(Notify_People instance);
    partial void DeleteNotify_People(Notify_People instance);
    partial void InsertNotify_School(Notify_School instance);
    partial void UpdateNotify_School(Notify_School instance);
    partial void DeleteNotify_School(Notify_School instance);
    partial void InsertQuestions(Questions instance);
    partial void UpdateQuestions(Questions instance);
    partial void DeleteQuestions(Questions instance);
    partial void InsertShare_Article(Share_Article instance);
    partial void UpdateShare_Article(Share_Article instance);
    partial void DeleteShare_Article(Share_Article instance);
    partial void InsertShare_Images(Share_Images instance);
    partial void UpdateShare_Images(Share_Images instance);
    partial void DeleteShare_Images(Share_Images instance);
    partial void InsertStudents(Students instance);
    partial void UpdateStudents(Students instance);
    partial void DeleteStudents(Students instance);
    partial void InsertSubjectMaterial(SubjectMaterial instance);
    partial void UpdateSubjectMaterial(SubjectMaterial instance);
    partial void DeleteSubjectMaterial(SubjectMaterial instance);
    partial void InsertTeachers(Teachers instance);
    partial void UpdateTeachers(Teachers instance);
    partial void DeleteTeachers(Teachers instance);
    partial void InsertTimeTable(TimeTable instance);
    partial void UpdateTimeTable(TimeTable instance);
    partial void DeleteTimeTable(TimeTable instance);
    partial void InsertVacation(Vacation instance);
    partial void UpdateVacation(Vacation instance);
    partial void DeleteVacation(Vacation instance);
    partial void InsertVacationType(VacationType instance);
    partial void UpdateVacationType(VacationType instance);
    partial void DeleteVacationType(VacationType instance);
    partial void InsertNotify_Grade(Notify_Grade instance);
    partial void UpdateNotify_Grade(Notify_Grade instance);
    partial void DeleteNotify_Grade(Notify_Grade instance);
    partial void InsertImages(Images instance);
    partial void UpdateImages(Images instance);
    partial void DeleteImages(Images instance);
    partial void InsertArticleComments(ArticleComments instance);
    partial void UpdateArticleComments(ArticleComments instance);
    partial void DeleteArticleComments(ArticleComments instance);
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GraduationProjectConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Faculty> Faculty
		{
			get
			{
				return this.GetTable<Faculty>();
			}
		}
		
		public System.Data.Linq.Table<Grade> Grade
		{
			get
			{
				return this.GetTable<Grade>();
			}
		}
		
		public System.Data.Linq.Table<Grades_Teachers> Grades_Teachers
		{
			get
			{
				return this.GetTable<Grades_Teachers>();
			}
		}
		
		public System.Data.Linq.Table<HomeWork> HomeWork
		{
			get
			{
				return this.GetTable<HomeWork>();
			}
		}
		
		public System.Data.Linq.Table<Notify> Notify
		{
			get
			{
				return this.GetTable<Notify>();
			}
		}
		
		public System.Data.Linq.Table<Notify_People> Notify_People
		{
			get
			{
				return this.GetTable<Notify_People>();
			}
		}
		
		public System.Data.Linq.Table<Notify_School> Notify_School
		{
			get
			{
				return this.GetTable<Notify_School>();
			}
		}
		
		public System.Data.Linq.Table<Questions> Questions
		{
			get
			{
				return this.GetTable<Questions>();
			}
		}
		
		public System.Data.Linq.Table<Share_Article> Share_Article
		{
			get
			{
				return this.GetTable<Share_Article>();
			}
		}
		
		public System.Data.Linq.Table<Share_Images> Share_Images
		{
			get
			{
				return this.GetTable<Share_Images>();
			}
		}
		
		public System.Data.Linq.Table<Students> Students
		{
			get
			{
				return this.GetTable<Students>();
			}
		}
		
		public System.Data.Linq.Table<SubjectMaterial> SubjectMaterial
		{
			get
			{
				return this.GetTable<SubjectMaterial>();
			}
		}
		
		public System.Data.Linq.Table<Teachers> Teachers
		{
			get
			{
				return this.GetTable<Teachers>();
			}
		}
		
		public System.Data.Linq.Table<TimeTable> TimeTable
		{
			get
			{
				return this.GetTable<TimeTable>();
			}
		}
		
		public System.Data.Linq.Table<Vacation> Vacation
		{
			get
			{
				return this.GetTable<Vacation>();
			}
		}
		
		public System.Data.Linq.Table<VacationType> VacationType
		{
			get
			{
				return this.GetTable<VacationType>();
			}
		}
		
		public System.Data.Linq.Table<Notify_Grade> Notify_Grade
		{
			get
			{
				return this.GetTable<Notify_Grade>();
			}
		}
		
		public System.Data.Linq.Table<Images> Images
		{
			get
			{
				return this.GetTable<Images>();
			}
		}
		
		public System.Data.Linq.Table<ArticleComments> ArticleComments
		{
			get
			{
				return this.GetTable<ArticleComments>();
			}
		}
		
		public System.Data.Linq.Table<Article> Article
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faculty")]
	public partial class Faculty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Grade> _Grade;
		
		private EntitySet<SubjectMaterial> _SubjectMaterial;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Faculty()
		{
			this._Grade = new EntitySet<Grade>(new Action<Grade>(this.attach_Grade), new Action<Grade>(this.detach_Grade));
			this._SubjectMaterial = new EntitySet<SubjectMaterial>(new Action<SubjectMaterial>(this.attach_SubjectMaterial), new Action<SubjectMaterial>(this.detach_SubjectMaterial));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Grade", Storage="_Grade", ThisKey="ID", OtherKey="FacultyID")]
		public EntitySet<Grade> Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				this._Grade.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_SubjectMaterial", Storage="_SubjectMaterial", ThisKey="ID", OtherKey="FacultyID")]
		public EntitySet<SubjectMaterial> SubjectMaterial
		{
			get
			{
				return this._SubjectMaterial;
			}
			set
			{
				this._SubjectMaterial.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grade(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_Grade(Grade entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
		
		private void attach_SubjectMaterial(SubjectMaterial entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_SubjectMaterial(SubjectMaterial entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grade")]
	public partial class Grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _FacultyID;
		
		private EntitySet<Grades_Teachers> _Grades_Teachers;
		
		private EntitySet<Students> _Students;
		
		private EntitySet<TimeTable> _TimeTable;
		
		private EntitySet<Notify_Grade> _Notify_Grade;
		
		private EntityRef<Faculty> _Faculty;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFacultyIDChanging(int value);
    partial void OnFacultyIDChanged();
    #endregion
		
		public Grade()
		{
			this._Grades_Teachers = new EntitySet<Grades_Teachers>(new Action<Grades_Teachers>(this.attach_Grades_Teachers), new Action<Grades_Teachers>(this.detach_Grades_Teachers));
			this._Students = new EntitySet<Students>(new Action<Students>(this.attach_Students), new Action<Students>(this.detach_Students));
			this._TimeTable = new EntitySet<TimeTable>(new Action<TimeTable>(this.attach_TimeTable), new Action<TimeTable>(this.detach_TimeTable));
			this._Notify_Grade = new EntitySet<Notify_Grade>(new Action<Notify_Grade>(this.attach_Notify_Grade), new Action<Notify_Grade>(this.detach_Notify_Grade));
			this._Faculty = default(EntityRef<Faculty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyID", DbType="Int NOT NULL")]
		public int FacultyID
		{
			get
			{
				return this._FacultyID;
			}
			set
			{
				if ((this._FacultyID != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIDChanging(value);
					this.SendPropertyChanging();
					this._FacultyID = value;
					this.SendPropertyChanged("FacultyID");
					this.OnFacultyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Grades_Teachers", Storage="_Grades_Teachers", ThisKey="ID", OtherKey="GradeID")]
		public EntitySet<Grades_Teachers> Grades_Teachers
		{
			get
			{
				return this._Grades_Teachers;
			}
			set
			{
				this._Grades_Teachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Students", Storage="_Students", ThisKey="ID", OtherKey="GradeID")]
		public EntitySet<Students> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_TimeTable", Storage="_TimeTable", ThisKey="ID", OtherKey="GradeID")]
		public EntitySet<TimeTable> TimeTable
		{
			get
			{
				return this._TimeTable;
			}
			set
			{
				this._TimeTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Notify_Grade", Storage="_Notify_Grade", ThisKey="ID", OtherKey="NotifyGradeID")]
		public EntitySet<Notify_Grade> Notify_Grade
		{
			get
			{
				return this._Notify_Grade;
			}
			set
			{
				this._Notify_Grade.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Grade", Storage="_Faculty", ThisKey="FacultyID", OtherKey="ID", IsForeignKey=true)]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.Grade.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.Grade.Add(this);
						this._FacultyID = value.ID;
					}
					else
					{
						this._FacultyID = default(int);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grades_Teachers(Grades_Teachers entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_Grades_Teachers(Grades_Teachers entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
		
		private void attach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
		
		private void attach_TimeTable(TimeTable entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_TimeTable(TimeTable entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
		
		private void attach_Notify_Grade(Notify_Grade entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_Notify_Grade(Notify_Grade entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grades_Teachers")]
	public partial class Grades_Teachers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GradeID;
		
		private int _TeacherID;
		
		private EntityRef<Grade> _Grade;
		
		private EntityRef<Teachers> _Teachers;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGradeIDChanging(int value);
    partial void OnGradeIDChanged();
    partial void OnTeacherIDChanging(int value);
    partial void OnTeacherIDChanged();
    #endregion
		
		public Grades_Teachers()
		{
			this._Grade = default(EntityRef<Grade>);
			this._Teachers = default(EntityRef<Teachers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", DbType="Int NOT NULL")]
		public int GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="Int NOT NULL")]
		public int TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teachers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Grades_Teachers", Storage="_Grade", ThisKey="GradeID", OtherKey="ID", IsForeignKey=true)]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.Grades_Teachers.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.Grades_Teachers.Add(this);
						this._GradeID = value.ID;
					}
					else
					{
						this._GradeID = default(int);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_Grades_Teachers", Storage="_Teachers", ThisKey="TeacherID", OtherKey="ID", IsForeignKey=true)]
		public Teachers Teachers
		{
			get
			{
				return this._Teachers.Entity;
			}
			set
			{
				Teachers previousValue = this._Teachers.Entity;
				if (((previousValue != value) 
							|| (this._Teachers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teachers.Entity = null;
						previousValue.Grades_Teachers.Remove(this);
					}
					this._Teachers.Entity = value;
					if ((value != null))
					{
						value.Grades_Teachers.Add(this);
						this._TeacherID = value.ID;
					}
					else
					{
						this._TeacherID = default(int);
					}
					this.SendPropertyChanged("Teachers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HomeWork")]
	public partial class HomeWork : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudentID;
		
		private string _Subject;
		
		private string _Title;
		
		private System.Nullable<System.DateTime> _PublishTime;
		
		private string _State;
		
		private System.Nullable<int> _Score;
		
		private string _Appendix;
		
		private string _Contents;
		
		private string _Comment;
		
		private EntityRef<Students> _Students;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPublishTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishTimeChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    partial void OnAppendixChanging(string value);
    partial void OnAppendixChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public HomeWork()
		{
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NChar(10)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(30)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishTime", DbType="Date")]
		public System.Nullable<System.DateTime> PublishTime
		{
			get
			{
				return this._PublishTime;
			}
			set
			{
				if ((this._PublishTime != value))
				{
					this.OnPublishTimeChanging(value);
					this.SendPropertyChanging();
					this._PublishTime = value;
					this.SendPropertyChanged("PublishTime");
					this.OnPublishTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NChar(10)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
		public System.Nullable<int> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appendix", DbType="NVarChar(50)")]
		public string Appendix
		{
			get
			{
				return this._Appendix;
			}
			set
			{
				if ((this._Appendix != value))
				{
					this.OnAppendixChanging(value);
					this.SendPropertyChanging();
					this._Appendix = value;
					this.SendPropertyChanged("Appendix");
					this.OnAppendixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="NVarChar(500)")]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(100)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_HomeWork", Storage="_Students", ThisKey="StudentID", OtherKey="ID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.HomeWork.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.HomeWork.Add(this);
						this._StudentID = value.ID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notify")]
	public partial class Notify : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PublisherID;
		
		private string _Title;
		
		private string _Summary;
		
		private System.Nullable<System.DateTime> _PublishTime;
		
		private string _Appendix;
		
		private EntitySet<Notify_People> _Notify_People;
		
		private EntitySet<Notify_Grade> _Notify_Grade;
		
		private EntityRef<Students> _Students;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublisherIDChanging(int value);
    partial void OnPublisherIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnPublishTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishTimeChanged();
    partial void OnAppendixChanging(string value);
    partial void OnAppendixChanged();
    #endregion
		
		public Notify()
		{
			this._Notify_People = new EntitySet<Notify_People>(new Action<Notify_People>(this.attach_Notify_People), new Action<Notify_People>(this.detach_Notify_People));
			this._Notify_Grade = new EntitySet<Notify_Grade>(new Action<Notify_Grade>(this.attach_Notify_Grade), new Action<Notify_Grade>(this.detach_Notify_Grade));
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherID", DbType="Int NOT NULL")]
		public int PublisherID
		{
			get
			{
				return this._PublisherID;
			}
			set
			{
				if ((this._PublisherID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublisherIDChanging(value);
					this.SendPropertyChanging();
					this._PublisherID = value;
					this.SendPropertyChanged("PublisherID");
					this.OnPublisherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NChar(20)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(50)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishTime", DbType="Date")]
		public System.Nullable<System.DateTime> PublishTime
		{
			get
			{
				return this._PublishTime;
			}
			set
			{
				if ((this._PublishTime != value))
				{
					this.OnPublishTimeChanging(value);
					this.SendPropertyChanging();
					this._PublishTime = value;
					this.SendPropertyChanged("PublishTime");
					this.OnPublishTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appendix", DbType="NVarChar(50)")]
		public string Appendix
		{
			get
			{
				return this._Appendix;
			}
			set
			{
				if ((this._Appendix != value))
				{
					this.OnAppendixChanging(value);
					this.SendPropertyChanging();
					this._Appendix = value;
					this.SendPropertyChanged("Appendix");
					this.OnAppendixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notify_Notify_People", Storage="_Notify_People", ThisKey="ID", OtherKey="NotifyID")]
		public EntitySet<Notify_People> Notify_People
		{
			get
			{
				return this._Notify_People;
			}
			set
			{
				this._Notify_People.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notify_Notify_Grade", Storage="_Notify_Grade", ThisKey="ID", OtherKey="NotifyID")]
		public EntitySet<Notify_Grade> Notify_Grade
		{
			get
			{
				return this._Notify_Grade;
			}
			set
			{
				this._Notify_Grade.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Notify", Storage="_Students", ThisKey="PublisherID", OtherKey="ID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Notify.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Notify.Add(this);
						this._PublisherID = value.ID;
					}
					else
					{
						this._PublisherID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notify_People(Notify_People entity)
		{
			this.SendPropertyChanging();
			entity.Notify = this;
		}
		
		private void detach_Notify_People(Notify_People entity)
		{
			this.SendPropertyChanging();
			entity.Notify = null;
		}
		
		private void attach_Notify_Grade(Notify_Grade entity)
		{
			this.SendPropertyChanging();
			entity.Notify = this;
		}
		
		private void detach_Notify_Grade(Notify_Grade entity)
		{
			this.SendPropertyChanging();
			entity.Notify = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notify_People")]
	public partial class Notify_People : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _NotifyID;
		
		private int _NotifyPeopleID;
		
		private EntityRef<Notify> _Notify;
		
		private EntityRef<Students> _Students;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNotifyIDChanging(int value);
    partial void OnNotifyIDChanged();
    partial void OnNotifyPeopleIDChanging(int value);
    partial void OnNotifyPeopleIDChanged();
    #endregion
		
		public Notify_People()
		{
			this._Notify = default(EntityRef<Notify>);
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyID", DbType="Int NOT NULL")]
		public int NotifyID
		{
			get
			{
				return this._NotifyID;
			}
			set
			{
				if ((this._NotifyID != value))
				{
					if (this._Notify.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotifyIDChanging(value);
					this.SendPropertyChanging();
					this._NotifyID = value;
					this.SendPropertyChanged("NotifyID");
					this.OnNotifyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyPeopleID", DbType="Int NOT NULL")]
		public int NotifyPeopleID
		{
			get
			{
				return this._NotifyPeopleID;
			}
			set
			{
				if ((this._NotifyPeopleID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotifyPeopleIDChanging(value);
					this.SendPropertyChanging();
					this._NotifyPeopleID = value;
					this.SendPropertyChanged("NotifyPeopleID");
					this.OnNotifyPeopleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notify_Notify_People", Storage="_Notify", ThisKey="NotifyID", OtherKey="ID", IsForeignKey=true)]
		public Notify Notify
		{
			get
			{
				return this._Notify.Entity;
			}
			set
			{
				Notify previousValue = this._Notify.Entity;
				if (((previousValue != value) 
							|| (this._Notify.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notify.Entity = null;
						previousValue.Notify_People.Remove(this);
					}
					this._Notify.Entity = value;
					if ((value != null))
					{
						value.Notify_People.Add(this);
						this._NotifyID = value.ID;
					}
					else
					{
						this._NotifyID = default(int);
					}
					this.SendPropertyChanged("Notify");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Notify_People", Storage="_Students", ThisKey="NotifyPeopleID", OtherKey="ID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Notify_People.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Notify_People.Add(this);
						this._NotifyPeopleID = value.ID;
					}
					else
					{
						this._NotifyPeopleID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notify_School")]
	public partial class Notify_School : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PublisherID;
		
		private System.Nullable<System.DateTime> _PublishTime;
		
		private string _Title;
		
		private string _Contents;
		
		private string _Appendix;
		
		private EntityRef<Students> _Students;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublisherIDChanging(int value);
    partial void OnPublisherIDChanged();
    partial void OnPublishTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPublishTimeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnAppendixChanging(string value);
    partial void OnAppendixChanged();
    #endregion
		
		public Notify_School()
		{
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherID", DbType="Int NOT NULL")]
		public int PublisherID
		{
			get
			{
				return this._PublisherID;
			}
			set
			{
				if ((this._PublisherID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublisherIDChanging(value);
					this.SendPropertyChanging();
					this._PublisherID = value;
					this.SendPropertyChanged("PublisherID");
					this.OnPublisherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishTime", DbType="Date")]
		public System.Nullable<System.DateTime> PublishTime
		{
			get
			{
				return this._PublishTime;
			}
			set
			{
				if ((this._PublishTime != value))
				{
					this.OnPublishTimeChanging(value);
					this.SendPropertyChanging();
					this._PublishTime = value;
					this.SendPropertyChanged("PublishTime");
					this.OnPublishTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="NVarChar(100)")]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appendix", DbType="NVarChar(50)")]
		public string Appendix
		{
			get
			{
				return this._Appendix;
			}
			set
			{
				if ((this._Appendix != value))
				{
					this.OnAppendixChanging(value);
					this.SendPropertyChanging();
					this._Appendix = value;
					this.SendPropertyChanged("Appendix");
					this.OnAppendixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Notify_School", Storage="_Students", ThisKey="PublisherID", OtherKey="ID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Notify_School.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Notify_School.Add(this);
						this._PublisherID = value.ID;
					}
					else
					{
						this._PublisherID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Questions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudentID;
		
		private string _Title;
		
		private string _Contents;
		
		private System.Nullable<System.DateTime> _Time;
		
		private string _ReplyContent;
		
		private System.Nullable<System.DateTime> _ReplyTime;
		
		private string _Appendix;
		
		private EntityRef<Students> _Students;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnReplyContentChanging(string value);
    partial void OnReplyContentChanged();
    partial void OnReplyTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnReplyTimeChanged();
    partial void OnAppendixChanging(string value);
    partial void OnAppendixChanged();
    #endregion
		
		public Questions()
		{
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="NVarChar(50)")]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Date")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplyContent", DbType="NVarChar(50)")]
		public string ReplyContent
		{
			get
			{
				return this._ReplyContent;
			}
			set
			{
				if ((this._ReplyContent != value))
				{
					this.OnReplyContentChanging(value);
					this.SendPropertyChanging();
					this._ReplyContent = value;
					this.SendPropertyChanged("ReplyContent");
					this.OnReplyContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplyTime", DbType="Date")]
		public System.Nullable<System.DateTime> ReplyTime
		{
			get
			{
				return this._ReplyTime;
			}
			set
			{
				if ((this._ReplyTime != value))
				{
					this.OnReplyTimeChanging(value);
					this.SendPropertyChanging();
					this._ReplyTime = value;
					this.SendPropertyChanged("ReplyTime");
					this.OnReplyTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appendix", DbType="NVarChar(50)")]
		public string Appendix
		{
			get
			{
				return this._Appendix;
			}
			set
			{
				if ((this._Appendix != value))
				{
					this.OnAppendixChanging(value);
					this.SendPropertyChanging();
					this._Appendix = value;
					this.SendPropertyChanged("Appendix");
					this.OnAppendixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Questions", Storage="_Students", ThisKey="StudentID", OtherKey="ID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._StudentID = value.ID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Share_Article")]
	public partial class Share_Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArticleID;
		
		private int _SharedID;
		
		private EntityRef<Students> _Students;
		
		private EntityRef<Article> _Article;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnSharedIDChanging(int value);
    partial void OnSharedIDChanged();
    #endregion
		
		public Share_Article()
		{
			this._Students = default(EntityRef<Students>);
			this._Article = default(EntityRef<Article>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleID", DbType="Int NOT NULL")]
		public int ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SharedID", DbType="Int NOT NULL")]
		public int SharedID
		{
			get
			{
				return this._SharedID;
			}
			set
			{
				if ((this._SharedID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSharedIDChanging(value);
					this.SendPropertyChanging();
					this._SharedID = value;
					this.SendPropertyChanged("SharedID");
					this.OnSharedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Share_Article", Storage="_Students", ThisKey="SharedID", OtherKey="ID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Share_Article.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Share_Article.Add(this);
						this._SharedID = value.ID;
					}
					else
					{
						this._SharedID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Share_Article", Storage="_Article", ThisKey="ArticleID", OtherKey="ID", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.Share_Article.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.Share_Article.Add(this);
						this._ArticleID = value.ID;
					}
					else
					{
						this._ArticleID = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Share_Images")]
	public partial class Share_Images : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ImageID;
		
		private int _StudentID;
		
		private EntityRef<Students> _Students;
		
		private EntityRef<Images> _Images;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    #endregion
		
		public Share_Images()
		{
			this._Students = default(EntityRef<Students>);
			this._Images = default(EntityRef<Images>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._Images.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Share_Images", Storage="_Students", ThisKey="StudentID", OtherKey="ID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Share_Images.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Share_Images.Add(this);
						this._StudentID = value.ID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Images_Share_Images", Storage="_Images", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true)]
		public Images Images
		{
			get
			{
				return this._Images.Entity;
			}
			set
			{
				Images previousValue = this._Images.Entity;
				if (((previousValue != value) 
							|| (this._Images.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Images.Entity = null;
						previousValue.Share_Images.Remove(this);
					}
					this._Images.Entity = value;
					if ((value != null))
					{
						value.Share_Images.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("Images");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Students : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _GradeID;
		
		private string _Duty;
		
		private string _PhoneNum;
		
		private string _QQNum;
		
		private string _Email;
		
		private string _Picture;
		
		private EntitySet<HomeWork> _HomeWork;
		
		private EntitySet<Notify> _Notify;
		
		private EntitySet<Notify_People> _Notify_People;
		
		private EntitySet<Notify_School> _Notify_School;
		
		private EntitySet<Questions> _Questions;
		
		private EntitySet<Share_Article> _Share_Article;
		
		private EntitySet<Share_Images> _Share_Images;
		
		private EntitySet<SubjectMaterial> _SubjectMaterial;
		
		private EntitySet<Vacation> _Vacation;
		
		private EntitySet<Images> _Images;
		
		private EntitySet<ArticleComments> _ArticleComments;
		
		private EntitySet<Article> _Article;
		
		private EntityRef<Grade> _Grade;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGradeIDChanging(int value);
    partial void OnGradeIDChanged();
    partial void OnDutyChanging(string value);
    partial void OnDutyChanged();
    partial void OnPhoneNumChanging(string value);
    partial void OnPhoneNumChanged();
    partial void OnQQNumChanging(string value);
    partial void OnQQNumChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    #endregion
		
		public Students()
		{
			this._HomeWork = new EntitySet<HomeWork>(new Action<HomeWork>(this.attach_HomeWork), new Action<HomeWork>(this.detach_HomeWork));
			this._Notify = new EntitySet<Notify>(new Action<Notify>(this.attach_Notify), new Action<Notify>(this.detach_Notify));
			this._Notify_People = new EntitySet<Notify_People>(new Action<Notify_People>(this.attach_Notify_People), new Action<Notify_People>(this.detach_Notify_People));
			this._Notify_School = new EntitySet<Notify_School>(new Action<Notify_School>(this.attach_Notify_School), new Action<Notify_School>(this.detach_Notify_School));
			this._Questions = new EntitySet<Questions>(new Action<Questions>(this.attach_Questions), new Action<Questions>(this.detach_Questions));
			this._Share_Article = new EntitySet<Share_Article>(new Action<Share_Article>(this.attach_Share_Article), new Action<Share_Article>(this.detach_Share_Article));
			this._Share_Images = new EntitySet<Share_Images>(new Action<Share_Images>(this.attach_Share_Images), new Action<Share_Images>(this.detach_Share_Images));
			this._SubjectMaterial = new EntitySet<SubjectMaterial>(new Action<SubjectMaterial>(this.attach_SubjectMaterial), new Action<SubjectMaterial>(this.detach_SubjectMaterial));
			this._Vacation = new EntitySet<Vacation>(new Action<Vacation>(this.attach_Vacation), new Action<Vacation>(this.detach_Vacation));
			this._Images = new EntitySet<Images>(new Action<Images>(this.attach_Images), new Action<Images>(this.detach_Images));
			this._ArticleComments = new EntitySet<ArticleComments>(new Action<ArticleComments>(this.attach_ArticleComments), new Action<ArticleComments>(this.detach_ArticleComments));
			this._Article = new EntitySet<Article>(new Action<Article>(this.attach_Article), new Action<Article>(this.detach_Article));
			this._Grade = default(EntityRef<Grade>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", DbType="Int NOT NULL")]
		public int GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duty", DbType="NChar(10)")]
		public string Duty
		{
			get
			{
				return this._Duty;
			}
			set
			{
				if ((this._Duty != value))
				{
					this.OnDutyChanging(value);
					this.SendPropertyChanging();
					this._Duty = value;
					this.SendPropertyChanged("Duty");
					this.OnDutyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNum", DbType="NChar(15)")]
		public string PhoneNum
		{
			get
			{
				return this._PhoneNum;
			}
			set
			{
				if ((this._PhoneNum != value))
				{
					this.OnPhoneNumChanging(value);
					this.SendPropertyChanging();
					this._PhoneNum = value;
					this.SendPropertyChanged("PhoneNum");
					this.OnPhoneNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QQNum", DbType="NChar(15)")]
		public string QQNum
		{
			get
			{
				return this._QQNum;
			}
			set
			{
				if ((this._QQNum != value))
				{
					this.OnQQNumChanging(value);
					this.SendPropertyChanging();
					this._QQNum = value;
					this.SendPropertyChanged("QQNum");
					this.OnQQNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NChar(20)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(50)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_HomeWork", Storage="_HomeWork", ThisKey="ID", OtherKey="StudentID")]
		public EntitySet<HomeWork> HomeWork
		{
			get
			{
				return this._HomeWork;
			}
			set
			{
				this._HomeWork.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Notify", Storage="_Notify", ThisKey="ID", OtherKey="PublisherID")]
		public EntitySet<Notify> Notify
		{
			get
			{
				return this._Notify;
			}
			set
			{
				this._Notify.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Notify_People", Storage="_Notify_People", ThisKey="ID", OtherKey="NotifyPeopleID")]
		public EntitySet<Notify_People> Notify_People
		{
			get
			{
				return this._Notify_People;
			}
			set
			{
				this._Notify_People.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Notify_School", Storage="_Notify_School", ThisKey="ID", OtherKey="PublisherID")]
		public EntitySet<Notify_School> Notify_School
		{
			get
			{
				return this._Notify_School;
			}
			set
			{
				this._Notify_School.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Questions", Storage="_Questions", ThisKey="ID", OtherKey="StudentID")]
		public EntitySet<Questions> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Share_Article", Storage="_Share_Article", ThisKey="ID", OtherKey="SharedID")]
		public EntitySet<Share_Article> Share_Article
		{
			get
			{
				return this._Share_Article;
			}
			set
			{
				this._Share_Article.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Share_Images", Storage="_Share_Images", ThisKey="ID", OtherKey="StudentID")]
		public EntitySet<Share_Images> Share_Images
		{
			get
			{
				return this._Share_Images;
			}
			set
			{
				this._Share_Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_SubjectMaterial", Storage="_SubjectMaterial", ThisKey="ID", OtherKey="UploadID")]
		public EntitySet<SubjectMaterial> SubjectMaterial
		{
			get
			{
				return this._SubjectMaterial;
			}
			set
			{
				this._SubjectMaterial.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Vacation", Storage="_Vacation", ThisKey="ID", OtherKey="PeopleID")]
		public EntitySet<Vacation> Vacation
		{
			get
			{
				return this._Vacation;
			}
			set
			{
				this._Vacation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Images", Storage="_Images", ThisKey="ID", OtherKey="OwnerID")]
		public EntitySet<Images> Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				this._Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_ArticleComments", Storage="_ArticleComments", ThisKey="ID", OtherKey="PeopleID")]
		public EntitySet<ArticleComments> ArticleComments
		{
			get
			{
				return this._ArticleComments;
			}
			set
			{
				this._ArticleComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Article", Storage="_Article", ThisKey="ID", OtherKey="WritingID")]
		public EntitySet<Article> Article
		{
			get
			{
				return this._Article;
			}
			set
			{
				this._Article.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Students", Storage="_Grade", ThisKey="GradeID", OtherKey="ID", IsForeignKey=true)]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._GradeID = value.ID;
					}
					else
					{
						this._GradeID = default(int);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HomeWork(HomeWork entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_HomeWork(HomeWork entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_Notify(Notify entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Notify(Notify entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_Notify_People(Notify_People entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Notify_People(Notify_People entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_Notify_School(Notify_School entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Notify_School(Notify_School entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_Questions(Questions entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Questions(Questions entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_Share_Article(Share_Article entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Share_Article(Share_Article entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_Share_Images(Share_Images entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Share_Images(Share_Images entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_SubjectMaterial(SubjectMaterial entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_SubjectMaterial(SubjectMaterial entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_Vacation(Vacation entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Vacation(Vacation entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_Images(Images entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Images(Images entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_ArticleComments(ArticleComments entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_ArticleComments(ArticleComments entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_Article(Article entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Article(Article entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubjectMaterial")]
	public partial class SubjectMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FacultyID;
		
		private string _Subject;
		
		private int _UploadID;
		
		private System.Nullable<System.DateTime> _UploadTime;
		
		private string _MaterialName;
		
		private string _MaterialDescribe;
		
		private string _Appendix;
		
		private EntityRef<Faculty> _Faculty;
		
		private EntityRef<Students> _Students;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFacultyIDChanging(int value);
    partial void OnFacultyIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnUploadIDChanging(int value);
    partial void OnUploadIDChanged();
    partial void OnUploadTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadTimeChanged();
    partial void OnMaterialNameChanging(string value);
    partial void OnMaterialNameChanged();
    partial void OnMaterialDescribeChanging(string value);
    partial void OnMaterialDescribeChanged();
    partial void OnAppendixChanging(string value);
    partial void OnAppendixChanged();
    #endregion
		
		public SubjectMaterial()
		{
			this._Faculty = default(EntityRef<Faculty>);
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyID", DbType="Int NOT NULL")]
		public int FacultyID
		{
			get
			{
				return this._FacultyID;
			}
			set
			{
				if ((this._FacultyID != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIDChanging(value);
					this.SendPropertyChanging();
					this._FacultyID = value;
					this.SendPropertyChanged("FacultyID");
					this.OnFacultyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NChar(10)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadID", DbType="Int NOT NULL")]
		public int UploadID
		{
			get
			{
				return this._UploadID;
			}
			set
			{
				if ((this._UploadID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUploadIDChanging(value);
					this.SendPropertyChanging();
					this._UploadID = value;
					this.SendPropertyChanged("UploadID");
					this.OnUploadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadTime", DbType="Date")]
		public System.Nullable<System.DateTime> UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialName", DbType="NChar(20)")]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this.OnMaterialNameChanging(value);
					this.SendPropertyChanging();
					this._MaterialName = value;
					this.SendPropertyChanged("MaterialName");
					this.OnMaterialNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialDescribe", DbType="NVarChar(50)")]
		public string MaterialDescribe
		{
			get
			{
				return this._MaterialDescribe;
			}
			set
			{
				if ((this._MaterialDescribe != value))
				{
					this.OnMaterialDescribeChanging(value);
					this.SendPropertyChanging();
					this._MaterialDescribe = value;
					this.SendPropertyChanged("MaterialDescribe");
					this.OnMaterialDescribeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appendix", DbType="NVarChar(50)")]
		public string Appendix
		{
			get
			{
				return this._Appendix;
			}
			set
			{
				if ((this._Appendix != value))
				{
					this.OnAppendixChanging(value);
					this.SendPropertyChanging();
					this._Appendix = value;
					this.SendPropertyChanged("Appendix");
					this.OnAppendixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_SubjectMaterial", Storage="_Faculty", ThisKey="FacultyID", OtherKey="ID", IsForeignKey=true)]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.SubjectMaterial.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.SubjectMaterial.Add(this);
						this._FacultyID = value.ID;
					}
					else
					{
						this._FacultyID = default(int);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_SubjectMaterial", Storage="_Students", ThisKey="UploadID", OtherKey="ID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.SubjectMaterial.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.SubjectMaterial.Add(this);
						this._UploadID = value.ID;
					}
					else
					{
						this._UploadID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teachers")]
	public partial class Teachers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _PhoneNum;
		
		private string _QQNum;
		
		private string _Email;
		
		private string _Picture;
		
		private string _Duty;
		
		private EntitySet<Grades_Teachers> _Grades_Teachers;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneNumChanging(string value);
    partial void OnPhoneNumChanged();
    partial void OnQQNumChanging(string value);
    partial void OnQQNumChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnDutyChanging(string value);
    partial void OnDutyChanged();
    #endregion
		
		public Teachers()
		{
			this._Grades_Teachers = new EntitySet<Grades_Teachers>(new Action<Grades_Teachers>(this.attach_Grades_Teachers), new Action<Grades_Teachers>(this.detach_Grades_Teachers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNum", DbType="NChar(15)")]
		public string PhoneNum
		{
			get
			{
				return this._PhoneNum;
			}
			set
			{
				if ((this._PhoneNum != value))
				{
					this.OnPhoneNumChanging(value);
					this.SendPropertyChanging();
					this._PhoneNum = value;
					this.SendPropertyChanged("PhoneNum");
					this.OnPhoneNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QQNum", DbType="NChar(15)")]
		public string QQNum
		{
			get
			{
				return this._QQNum;
			}
			set
			{
				if ((this._QQNum != value))
				{
					this.OnQQNumChanging(value);
					this.SendPropertyChanging();
					this._QQNum = value;
					this.SendPropertyChanged("QQNum");
					this.OnQQNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NChar(15)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(50)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duty", DbType="NChar(10)")]
		public string Duty
		{
			get
			{
				return this._Duty;
			}
			set
			{
				if ((this._Duty != value))
				{
					this.OnDutyChanging(value);
					this.SendPropertyChanging();
					this._Duty = value;
					this.SendPropertyChanged("Duty");
					this.OnDutyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_Grades_Teachers", Storage="_Grades_Teachers", ThisKey="ID", OtherKey="TeacherID")]
		public EntitySet<Grades_Teachers> Grades_Teachers
		{
			get
			{
				return this._Grades_Teachers;
			}
			set
			{
				this._Grades_Teachers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grades_Teachers(Grades_Teachers entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = this;
		}
		
		private void detach_Grades_Teachers(Grades_Teachers entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeTable")]
	public partial class TimeTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Week;
		
		private int _GradeID;
		
		private string _One;
		
		private string _Two;
		
		private string _Three;
		
		private string _Four;
		
		private string _Five;
		
		private string _Six;
		
		private string _Seven;
		
		private EntityRef<Grade> _Grade;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWeekChanging(string value);
    partial void OnWeekChanged();
    partial void OnGradeIDChanging(int value);
    partial void OnGradeIDChanged();
    partial void OnOneChanging(string value);
    partial void OnOneChanged();
    partial void OnTwoChanging(string value);
    partial void OnTwoChanged();
    partial void OnThreeChanging(string value);
    partial void OnThreeChanged();
    partial void OnFourChanging(string value);
    partial void OnFourChanged();
    partial void OnFiveChanging(string value);
    partial void OnFiveChanged();
    partial void OnSixChanging(string value);
    partial void OnSixChanged();
    partial void OnSevenChanging(string value);
    partial void OnSevenChanged();
    #endregion
		
		public TimeTable()
		{
			this._Grade = default(EntityRef<Grade>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Week", DbType="NChar(10)")]
		public string Week
		{
			get
			{
				return this._Week;
			}
			set
			{
				if ((this._Week != value))
				{
					this.OnWeekChanging(value);
					this.SendPropertyChanging();
					this._Week = value;
					this.SendPropertyChanged("Week");
					this.OnWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", DbType="Int NOT NULL")]
		public int GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_One", DbType="NChar(10)")]
		public string One
		{
			get
			{
				return this._One;
			}
			set
			{
				if ((this._One != value))
				{
					this.OnOneChanging(value);
					this.SendPropertyChanging();
					this._One = value;
					this.SendPropertyChanged("One");
					this.OnOneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Two", DbType="NChar(10)")]
		public string Two
		{
			get
			{
				return this._Two;
			}
			set
			{
				if ((this._Two != value))
				{
					this.OnTwoChanging(value);
					this.SendPropertyChanging();
					this._Two = value;
					this.SendPropertyChanged("Two");
					this.OnTwoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Three", DbType="NChar(10)")]
		public string Three
		{
			get
			{
				return this._Three;
			}
			set
			{
				if ((this._Three != value))
				{
					this.OnThreeChanging(value);
					this.SendPropertyChanging();
					this._Three = value;
					this.SendPropertyChanged("Three");
					this.OnThreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Four", DbType="NChar(10)")]
		public string Four
		{
			get
			{
				return this._Four;
			}
			set
			{
				if ((this._Four != value))
				{
					this.OnFourChanging(value);
					this.SendPropertyChanging();
					this._Four = value;
					this.SendPropertyChanged("Four");
					this.OnFourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Five", DbType="NChar(10)")]
		public string Five
		{
			get
			{
				return this._Five;
			}
			set
			{
				if ((this._Five != value))
				{
					this.OnFiveChanging(value);
					this.SendPropertyChanging();
					this._Five = value;
					this.SendPropertyChanged("Five");
					this.OnFiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Six", DbType="NChar(10)")]
		public string Six
		{
			get
			{
				return this._Six;
			}
			set
			{
				if ((this._Six != value))
				{
					this.OnSixChanging(value);
					this.SendPropertyChanging();
					this._Six = value;
					this.SendPropertyChanged("Six");
					this.OnSixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seven", DbType="NChar(10)")]
		public string Seven
		{
			get
			{
				return this._Seven;
			}
			set
			{
				if ((this._Seven != value))
				{
					this.OnSevenChanging(value);
					this.SendPropertyChanging();
					this._Seven = value;
					this.SendPropertyChanged("Seven");
					this.OnSevenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_TimeTable", Storage="_Grade", ThisKey="GradeID", OtherKey="ID", IsForeignKey=true)]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.TimeTable.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.TimeTable.Add(this);
						this._GradeID = value.ID;
					}
					else
					{
						this._GradeID = default(int);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vacation")]
	public partial class Vacation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PeopleID;
		
		private string _Reason;
		
		private System.Nullable<System.DateTime> _ApplyTime;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private int _VacationTypeID;
		
		private string _State;
		
		private string _Appendix;
		
		private EntityRef<Students> _Students;
		
		private EntityRef<VacationType> _VacationType;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPeopleIDChanging(int value);
    partial void OnPeopleIDChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnApplyTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnApplyTimeChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnVacationTypeIDChanging(int value);
    partial void OnVacationTypeIDChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnAppendixChanging(string value);
    partial void OnAppendixChanged();
    #endregion
		
		public Vacation()
		{
			this._Students = default(EntityRef<Students>);
			this._VacationType = default(EntityRef<VacationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeopleID", DbType="Int NOT NULL")]
		public int PeopleID
		{
			get
			{
				return this._PeopleID;
			}
			set
			{
				if ((this._PeopleID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeopleIDChanging(value);
					this.SendPropertyChanging();
					this._PeopleID = value;
					this.SendPropertyChanged("PeopleID");
					this.OnPeopleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NChar(50)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplyTime", DbType="Date")]
		public System.Nullable<System.DateTime> ApplyTime
		{
			get
			{
				return this._ApplyTime;
			}
			set
			{
				if ((this._ApplyTime != value))
				{
					this.OnApplyTimeChanging(value);
					this.SendPropertyChanging();
					this._ApplyTime = value;
					this.SendPropertyChanged("ApplyTime");
					this.OnApplyTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Date")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Date")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VacationTypeID", DbType="Int NOT NULL")]
		public int VacationTypeID
		{
			get
			{
				return this._VacationTypeID;
			}
			set
			{
				if ((this._VacationTypeID != value))
				{
					if (this._VacationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVacationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VacationTypeID = value;
					this.SendPropertyChanged("VacationTypeID");
					this.OnVacationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NChar(10)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appendix", DbType="NVarChar(50)")]
		public string Appendix
		{
			get
			{
				return this._Appendix;
			}
			set
			{
				if ((this._Appendix != value))
				{
					this.OnAppendixChanging(value);
					this.SendPropertyChanging();
					this._Appendix = value;
					this.SendPropertyChanged("Appendix");
					this.OnAppendixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Vacation", Storage="_Students", ThisKey="PeopleID", OtherKey="ID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Vacation.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Vacation.Add(this);
						this._PeopleID = value.ID;
					}
					else
					{
						this._PeopleID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VacationType_Vacation", Storage="_VacationType", ThisKey="VacationTypeID", OtherKey="ID", IsForeignKey=true)]
		public VacationType VacationType
		{
			get
			{
				return this._VacationType.Entity;
			}
			set
			{
				VacationType previousValue = this._VacationType.Entity;
				if (((previousValue != value) 
							|| (this._VacationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VacationType.Entity = null;
						previousValue.Vacation.Remove(this);
					}
					this._VacationType.Entity = value;
					if ((value != null))
					{
						value.Vacation.Add(this);
						this._VacationTypeID = value.ID;
					}
					else
					{
						this._VacationTypeID = default(int);
					}
					this.SendPropertyChanged("VacationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VacationType")]
	public partial class VacationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Vacation> _Vacation;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public VacationType()
		{
			this._Vacation = new EntitySet<Vacation>(new Action<Vacation>(this.attach_Vacation), new Action<Vacation>(this.detach_Vacation));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VacationType_Vacation", Storage="_Vacation", ThisKey="ID", OtherKey="VacationTypeID")]
		public EntitySet<Vacation> Vacation
		{
			get
			{
				return this._Vacation;
			}
			set
			{
				this._Vacation.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vacation(Vacation entity)
		{
			this.SendPropertyChanging();
			entity.VacationType = this;
		}
		
		private void detach_Vacation(Vacation entity)
		{
			this.SendPropertyChanging();
			entity.VacationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notify_Grade")]
	public partial class Notify_Grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _NotifyID;
		
		private int _NotifyGradeID;
		
		private EntityRef<Grade> _Grade;
		
		private EntityRef<Notify> _Notify;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNotifyIDChanging(int value);
    partial void OnNotifyIDChanged();
    partial void OnNotifyGradeIDChanging(int value);
    partial void OnNotifyGradeIDChanged();
    #endregion
		
		public Notify_Grade()
		{
			this._Grade = default(EntityRef<Grade>);
			this._Notify = default(EntityRef<Notify>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyID", DbType="Int NOT NULL")]
		public int NotifyID
		{
			get
			{
				return this._NotifyID;
			}
			set
			{
				if ((this._NotifyID != value))
				{
					if (this._Notify.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotifyIDChanging(value);
					this.SendPropertyChanging();
					this._NotifyID = value;
					this.SendPropertyChanged("NotifyID");
					this.OnNotifyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyGradeID", DbType="Int NOT NULL")]
		public int NotifyGradeID
		{
			get
			{
				return this._NotifyGradeID;
			}
			set
			{
				if ((this._NotifyGradeID != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotifyGradeIDChanging(value);
					this.SendPropertyChanging();
					this._NotifyGradeID = value;
					this.SendPropertyChanged("NotifyGradeID");
					this.OnNotifyGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Notify_Grade", Storage="_Grade", ThisKey="NotifyGradeID", OtherKey="ID", IsForeignKey=true)]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.Notify_Grade.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.Notify_Grade.Add(this);
						this._NotifyGradeID = value.ID;
					}
					else
					{
						this._NotifyGradeID = default(int);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notify_Notify_Grade", Storage="_Notify", ThisKey="NotifyID", OtherKey="ID", IsForeignKey=true)]
		public Notify Notify
		{
			get
			{
				return this._Notify.Entity;
			}
			set
			{
				Notify previousValue = this._Notify.Entity;
				if (((previousValue != value) 
							|| (this._Notify.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notify.Entity = null;
						previousValue.Notify_Grade.Remove(this);
					}
					this._Notify.Entity = value;
					if ((value != null))
					{
						value.Notify_Grade.Add(this);
						this._NotifyID = value.ID;
					}
					else
					{
						this._NotifyID = default(int);
					}
					this.SendPropertyChanged("Notify");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Images")]
	public partial class Images : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ImagePath;
		
		private int _OwnerID;
		
		private System.Nullable<System.DateTime> _PubLishTime;
		
		private string _Description;
		
		private EntitySet<Share_Images> _Share_Images;
		
		private EntityRef<Students> _Students;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnPubLishTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPubLishTimeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Images()
		{
			this._Share_Images = new EntitySet<Share_Images>(new Action<Share_Images>(this.attach_Share_Images), new Action<Share_Images>(this.detach_Share_Images));
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(50)")]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PubLishTime", DbType="Date")]
		public System.Nullable<System.DateTime> PubLishTime
		{
			get
			{
				return this._PubLishTime;
			}
			set
			{
				if ((this._PubLishTime != value))
				{
					this.OnPubLishTimeChanging(value);
					this.SendPropertyChanging();
					this._PubLishTime = value;
					this.SendPropertyChanged("PubLishTime");
					this.OnPubLishTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Images_Share_Images", Storage="_Share_Images", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<Share_Images> Share_Images
		{
			get
			{
				return this._Share_Images;
			}
			set
			{
				this._Share_Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Images", Storage="_Students", ThisKey="OwnerID", OtherKey="ID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Images.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Images.Add(this);
						this._OwnerID = value.ID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Share_Images(Share_Images entity)
		{
			this.SendPropertyChanging();
			entity.Images = this;
		}
		
		private void detach_Share_Images(Share_Images entity)
		{
			this.SendPropertyChanging();
			entity.Images = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArticleComments")]
	public partial class ArticleComments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AriticleID;
		
		private int _PeopleID;
		
		private string _Contents;
		
		private System.Nullable<System.DateTime> _Time;
		
		private EntityRef<Students> _Students;
		
		private EntityRef<Article> _Article;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAriticleIDChanging(int value);
    partial void OnAriticleIDChanged();
    partial void OnPeopleIDChanging(int value);
    partial void OnPeopleIDChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    #endregion
		
		public ArticleComments()
		{
			this._Students = default(EntityRef<Students>);
			this._Article = default(EntityRef<Article>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AriticleID", DbType="Int NOT NULL")]
		public int AriticleID
		{
			get
			{
				return this._AriticleID;
			}
			set
			{
				if ((this._AriticleID != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAriticleIDChanging(value);
					this.SendPropertyChanging();
					this._AriticleID = value;
					this.SendPropertyChanged("AriticleID");
					this.OnAriticleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeopleID", DbType="Int NOT NULL")]
		public int PeopleID
		{
			get
			{
				return this._PeopleID;
			}
			set
			{
				if ((this._PeopleID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeopleIDChanging(value);
					this.SendPropertyChanging();
					this._PeopleID = value;
					this.SendPropertyChanged("PeopleID");
					this.OnPeopleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="NVarChar(150)")]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Date")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_ArticleComments", Storage="_Students", ThisKey="PeopleID", OtherKey="ID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.ArticleComments.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.ArticleComments.Add(this);
						this._PeopleID = value.ID;
					}
					else
					{
						this._PeopleID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_ArticleComments", Storage="_Article", ThisKey="AriticleID", OtherKey="ID", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.ArticleComments.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.ArticleComments.Add(this);
						this._AriticleID = value.ID;
					}
					else
					{
						this._AriticleID = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private int _WritingID;
		
		private System.Nullable<System.DateTime> _Time;
		
		private int _ClickRate;
		
		private string _Contents;
		
		private string _Appendix;
		
		private EntitySet<Share_Article> _Share_Article;
		
		private EntitySet<ArticleComments> _ArticleComments;
		
		private EntityRef<Students> _Students;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnWritingIDChanging(int value);
    partial void OnWritingIDChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnClickRateChanging(int value);
    partial void OnClickRateChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnAppendixChanging(string value);
    partial void OnAppendixChanged();
    #endregion
		
		public Article()
		{
			this._Share_Article = new EntitySet<Share_Article>(new Action<Share_Article>(this.attach_Share_Article), new Action<Share_Article>(this.detach_Share_Article));
			this._ArticleComments = new EntitySet<ArticleComments>(new Action<ArticleComments>(this.attach_ArticleComments), new Action<ArticleComments>(this.detach_ArticleComments));
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WritingID", DbType="Int NOT NULL")]
		public int WritingID
		{
			get
			{
				return this._WritingID;
			}
			set
			{
				if ((this._WritingID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWritingIDChanging(value);
					this.SendPropertyChanging();
					this._WritingID = value;
					this.SendPropertyChanged("WritingID");
					this.OnWritingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClickRate", DbType="Int NOT NULL")]
		public int ClickRate
		{
			get
			{
				return this._ClickRate;
			}
			set
			{
				if ((this._ClickRate != value))
				{
					this.OnClickRateChanging(value);
					this.SendPropertyChanging();
					this._ClickRate = value;
					this.SendPropertyChanged("ClickRate");
					this.OnClickRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contents", DbType="NVarChar(2000)")]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appendix", DbType="NVarChar(50)")]
		public string Appendix
		{
			get
			{
				return this._Appendix;
			}
			set
			{
				if ((this._Appendix != value))
				{
					this.OnAppendixChanging(value);
					this.SendPropertyChanging();
					this._Appendix = value;
					this.SendPropertyChanged("Appendix");
					this.OnAppendixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_Share_Article", Storage="_Share_Article", ThisKey="ID", OtherKey="ArticleID")]
		public EntitySet<Share_Article> Share_Article
		{
			get
			{
				return this._Share_Article;
			}
			set
			{
				this._Share_Article.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_ArticleComments", Storage="_ArticleComments", ThisKey="ID", OtherKey="AriticleID")]
		public EntitySet<ArticleComments> ArticleComments
		{
			get
			{
				return this._ArticleComments;
			}
			set
			{
				this._ArticleComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Article", Storage="_Students", ThisKey="WritingID", OtherKey="ID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Article.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Article.Add(this);
						this._WritingID = value.ID;
					}
					else
					{
						this._WritingID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Share_Article(Share_Article entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_Share_Article(Share_Article entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
		
		private void attach_ArticleComments(ArticleComments entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_ArticleComments(ArticleComments entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}
}
#pragma warning restore 1591
